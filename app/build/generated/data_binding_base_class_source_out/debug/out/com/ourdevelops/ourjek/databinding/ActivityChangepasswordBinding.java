// Generated by view binder compiler. Do not edit!
package com.ourdevelops.ourjek.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import com.ourdevelops.ourjek.R;
import customfonts.TextViewSFProDisplayRegular;
import de.hdodenhof.circleimageview.CircleImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityChangepasswordBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Toolbar appBarLayout;

  @NonNull
  public final ImageView backBtnVerify;

  @NonNull
  public final MaterialButton buttonconfirm;

  @NonNull
  public final TextInputEditText cnewpassword;

  @NonNull
  public final TextInputLayout cnewpasswordTil;

  @NonNull
  public final LinearLayout inputsWrapper;

  @NonNull
  public final LinearLayout lllogo;

  @NonNull
  public final ImageView logo;

  @NonNull
  public final TextInputEditText newpassword;

  @NonNull
  public final TextInputLayout newpasswordTil;

  @NonNull
  public final LinearLayout oldPasswordWrapper;

  @NonNull
  public final TextInputEditText password;

  @NonNull
  public final TextInputLayout passwordtil;

  @NonNull
  public final CircleImageView profileimage;

  @NonNull
  public final RelativeLayout rlnotif2;

  @NonNull
  public final RelativeLayout rlprogress;

  @NonNull
  public final TextViewSFProDisplayRegular textnotif2;

  private ActivityChangepasswordBinding(@NonNull ConstraintLayout rootView,
      @NonNull Toolbar appBarLayout, @NonNull ImageView backBtnVerify,
      @NonNull MaterialButton buttonconfirm, @NonNull TextInputEditText cnewpassword,
      @NonNull TextInputLayout cnewpasswordTil, @NonNull LinearLayout inputsWrapper,
      @NonNull LinearLayout lllogo, @NonNull ImageView logo, @NonNull TextInputEditText newpassword,
      @NonNull TextInputLayout newpasswordTil, @NonNull LinearLayout oldPasswordWrapper,
      @NonNull TextInputEditText password, @NonNull TextInputLayout passwordtil,
      @NonNull CircleImageView profileimage, @NonNull RelativeLayout rlnotif2,
      @NonNull RelativeLayout rlprogress, @NonNull TextViewSFProDisplayRegular textnotif2) {
    this.rootView = rootView;
    this.appBarLayout = appBarLayout;
    this.backBtnVerify = backBtnVerify;
    this.buttonconfirm = buttonconfirm;
    this.cnewpassword = cnewpassword;
    this.cnewpasswordTil = cnewpasswordTil;
    this.inputsWrapper = inputsWrapper;
    this.lllogo = lllogo;
    this.logo = logo;
    this.newpassword = newpassword;
    this.newpasswordTil = newpasswordTil;
    this.oldPasswordWrapper = oldPasswordWrapper;
    this.password = password;
    this.passwordtil = passwordtil;
    this.profileimage = profileimage;
    this.rlnotif2 = rlnotif2;
    this.rlprogress = rlprogress;
    this.textnotif2 = textnotif2;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityChangepasswordBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityChangepasswordBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_changepassword, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityChangepasswordBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.app_bar_layout;
      Toolbar appBarLayout = rootView.findViewById(id);
      if (appBarLayout == null) {
        break missingId;
      }

      id = R.id.back_btn_verify;
      ImageView backBtnVerify = rootView.findViewById(id);
      if (backBtnVerify == null) {
        break missingId;
      }

      id = R.id.buttonconfirm;
      MaterialButton buttonconfirm = rootView.findViewById(id);
      if (buttonconfirm == null) {
        break missingId;
      }

      id = R.id.cnewpassword;
      TextInputEditText cnewpassword = rootView.findViewById(id);
      if (cnewpassword == null) {
        break missingId;
      }

      id = R.id.cnewpasswordTil;
      TextInputLayout cnewpasswordTil = rootView.findViewById(id);
      if (cnewpasswordTil == null) {
        break missingId;
      }

      id = R.id.inputs_wrapper;
      LinearLayout inputsWrapper = rootView.findViewById(id);
      if (inputsWrapper == null) {
        break missingId;
      }

      id = R.id.lllogo;
      LinearLayout lllogo = rootView.findViewById(id);
      if (lllogo == null) {
        break missingId;
      }

      id = R.id.logo;
      ImageView logo = rootView.findViewById(id);
      if (logo == null) {
        break missingId;
      }

      id = R.id.newpassword;
      TextInputEditText newpassword = rootView.findViewById(id);
      if (newpassword == null) {
        break missingId;
      }

      id = R.id.newpasswordTil;
      TextInputLayout newpasswordTil = rootView.findViewById(id);
      if (newpasswordTil == null) {
        break missingId;
      }

      id = R.id.old_password_wrapper;
      LinearLayout oldPasswordWrapper = rootView.findViewById(id);
      if (oldPasswordWrapper == null) {
        break missingId;
      }

      id = R.id.password;
      TextInputEditText password = rootView.findViewById(id);
      if (password == null) {
        break missingId;
      }

      id = R.id.passwordtil;
      TextInputLayout passwordtil = rootView.findViewById(id);
      if (passwordtil == null) {
        break missingId;
      }

      id = R.id.profileimage;
      CircleImageView profileimage = rootView.findViewById(id);
      if (profileimage == null) {
        break missingId;
      }

      id = R.id.rlnotif2;
      RelativeLayout rlnotif2 = rootView.findViewById(id);
      if (rlnotif2 == null) {
        break missingId;
      }

      id = R.id.rlprogress;
      RelativeLayout rlprogress = rootView.findViewById(id);
      if (rlprogress == null) {
        break missingId;
      }

      id = R.id.textnotif2;
      TextViewSFProDisplayRegular textnotif2 = rootView.findViewById(id);
      if (textnotif2 == null) {
        break missingId;
      }

      return new ActivityChangepasswordBinding((ConstraintLayout) rootView, appBarLayout,
          backBtnVerify, buttonconfirm, cnewpassword, cnewpasswordTil, inputsWrapper, lllogo, logo,
          newpassword, newpasswordTil, oldPasswordWrapper, password, passwordtil, profileimage,
          rlnotif2, rlprogress, textnotif2);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
