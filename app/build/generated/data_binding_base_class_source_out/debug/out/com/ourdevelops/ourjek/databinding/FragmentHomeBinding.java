// Generated by view binder compiler. Do not edit!
package com.ourdevelops.ourjek.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewpager.widget.ViewPager;
import com.facebook.shimmer.ShimmerFrameLayout;
import com.google.android.material.circularreveal.coordinatorlayout.CircularRevealCoordinatorLayout;
import com.ourdevelops.ourjek.R;
import customfonts.TextViewSFProDisplayMedium;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import me.relex.circleindicator.CircleIndicator;

public final class FragmentHomeBinding implements ViewBinding {
  @NonNull
  private final CircularRevealCoordinatorLayout rootView;

  @NonNull
  public final RecyclerView berita;

  @NonNull
  public final FrameLayout bottomSheet;

  @NonNull
  public final RecyclerView category;

  @NonNull
  public final RecyclerView catmerchantnear;

  @NonNull
  public final RecyclerView catmerchantpromo;

  @NonNull
  public final CardView cvTopmain;

  @NonNull
  public final RelativeLayout detail;

  @NonNull
  public final CircularRevealCoordinatorLayout home;

  @NonNull
  public final ImageView icdetail;

  @NonNull
  public final ImageView icpromo;

  @NonNull
  public final ImageView ictopup;

  @NonNull
  public final ImageView icwithdraw;

  @NonNull
  public final CircleIndicator indicatorUnselectedBackgroundReview;

  @NonNull
  public final SwipeRefreshLayout layoutSwiperefresh;

  @NonNull
  public final LinearLayout llHome;

  @NonNull
  public final LinearLayout llOffice;

  @NonNull
  public final LinearLayout lllayanan;

  @NonNull
  public final LinearLayout llmerchantnear;

  @NonNull
  public final LinearLayout llmerchantpromo;

  @NonNull
  public final LinearLayout llnews;

  @NonNull
  public final LinearLayout llrating;

  @NonNull
  public final RecyclerView merchantnear;

  @NonNull
  public final RecyclerView merchantpromo;

  @NonNull
  public final TextViewSFProDisplayMedium nodatanear;

  @NonNull
  public final TextViewSFProDisplayMedium nodatapromo;

  @NonNull
  public final RelativeLayout promo;

  @NonNull
  public final LinearLayout promoslider;

  @NonNull
  public final LinearLayout rlslider;

  @NonNull
  public final TextViewSFProDisplayMedium saldo;

  @NonNull
  public final ShimmerFrameLayout shimberita;

  @NonNull
  public final LinearLayout shimlistcatnear;

  @NonNull
  public final LinearLayout shimlistcatpromo;

  @NonNull
  public final LinearLayout shimlistnear;

  @NonNull
  public final LinearLayout shimlistpromo;

  @NonNull
  public final ShimmerFrameLayout shimmepromo;

  @NonNull
  public final ShimmerFrameLayout shimmercat;

  @NonNull
  public final ShimmerFrameLayout shimmerchantnear;

  @NonNull
  public final ShimmerFrameLayout shimmerchantpromo;

  @NonNull
  public final ShimmerFrameLayout shimreview;

  @NonNull
  public final TextViewSFProDisplayMedium showall;

  @NonNull
  public final RelativeLayout topup;

  @NonNull
  public final TextViewSFProDisplayMedium tvAnotherLocation;

  @NonNull
  public final TextViewSFProDisplayMedium tvFrom;

  @NonNull
  public final TextViewSFProDisplayMedium tvTo;

  @NonNull
  public final LinearLayout viewLatestNews;

  @NonNull
  public final ViewPager viewPagerreview;

  @NonNull
  public final RelativeLayout withdraw;

  private FragmentHomeBinding(@NonNull CircularRevealCoordinatorLayout rootView,
      @NonNull RecyclerView berita, @NonNull FrameLayout bottomSheet,
      @NonNull RecyclerView category, @NonNull RecyclerView catmerchantnear,
      @NonNull RecyclerView catmerchantpromo, @NonNull CardView cvTopmain,
      @NonNull RelativeLayout detail, @NonNull CircularRevealCoordinatorLayout home,
      @NonNull ImageView icdetail, @NonNull ImageView icpromo, @NonNull ImageView ictopup,
      @NonNull ImageView icwithdraw, @NonNull CircleIndicator indicatorUnselectedBackgroundReview,
      @NonNull SwipeRefreshLayout layoutSwiperefresh, @NonNull LinearLayout llHome,
      @NonNull LinearLayout llOffice, @NonNull LinearLayout lllayanan,
      @NonNull LinearLayout llmerchantnear, @NonNull LinearLayout llmerchantpromo,
      @NonNull LinearLayout llnews, @NonNull LinearLayout llrating,
      @NonNull RecyclerView merchantnear, @NonNull RecyclerView merchantpromo,
      @NonNull TextViewSFProDisplayMedium nodatanear,
      @NonNull TextViewSFProDisplayMedium nodatapromo, @NonNull RelativeLayout promo,
      @NonNull LinearLayout promoslider, @NonNull LinearLayout rlslider,
      @NonNull TextViewSFProDisplayMedium saldo, @NonNull ShimmerFrameLayout shimberita,
      @NonNull LinearLayout shimlistcatnear, @NonNull LinearLayout shimlistcatpromo,
      @NonNull LinearLayout shimlistnear, @NonNull LinearLayout shimlistpromo,
      @NonNull ShimmerFrameLayout shimmepromo, @NonNull ShimmerFrameLayout shimmercat,
      @NonNull ShimmerFrameLayout shimmerchantnear, @NonNull ShimmerFrameLayout shimmerchantpromo,
      @NonNull ShimmerFrameLayout shimreview, @NonNull TextViewSFProDisplayMedium showall,
      @NonNull RelativeLayout topup, @NonNull TextViewSFProDisplayMedium tvAnotherLocation,
      @NonNull TextViewSFProDisplayMedium tvFrom, @NonNull TextViewSFProDisplayMedium tvTo,
      @NonNull LinearLayout viewLatestNews, @NonNull ViewPager viewPagerreview,
      @NonNull RelativeLayout withdraw) {
    this.rootView = rootView;
    this.berita = berita;
    this.bottomSheet = bottomSheet;
    this.category = category;
    this.catmerchantnear = catmerchantnear;
    this.catmerchantpromo = catmerchantpromo;
    this.cvTopmain = cvTopmain;
    this.detail = detail;
    this.home = home;
    this.icdetail = icdetail;
    this.icpromo = icpromo;
    this.ictopup = ictopup;
    this.icwithdraw = icwithdraw;
    this.indicatorUnselectedBackgroundReview = indicatorUnselectedBackgroundReview;
    this.layoutSwiperefresh = layoutSwiperefresh;
    this.llHome = llHome;
    this.llOffice = llOffice;
    this.lllayanan = lllayanan;
    this.llmerchantnear = llmerchantnear;
    this.llmerchantpromo = llmerchantpromo;
    this.llnews = llnews;
    this.llrating = llrating;
    this.merchantnear = merchantnear;
    this.merchantpromo = merchantpromo;
    this.nodatanear = nodatanear;
    this.nodatapromo = nodatapromo;
    this.promo = promo;
    this.promoslider = promoslider;
    this.rlslider = rlslider;
    this.saldo = saldo;
    this.shimberita = shimberita;
    this.shimlistcatnear = shimlistcatnear;
    this.shimlistcatpromo = shimlistcatpromo;
    this.shimlistnear = shimlistnear;
    this.shimlistpromo = shimlistpromo;
    this.shimmepromo = shimmepromo;
    this.shimmercat = shimmercat;
    this.shimmerchantnear = shimmerchantnear;
    this.shimmerchantpromo = shimmerchantpromo;
    this.shimreview = shimreview;
    this.showall = showall;
    this.topup = topup;
    this.tvAnotherLocation = tvAnotherLocation;
    this.tvFrom = tvFrom;
    this.tvTo = tvTo;
    this.viewLatestNews = viewLatestNews;
    this.viewPagerreview = viewPagerreview;
    this.withdraw = withdraw;
  }

  @Override
  @NonNull
  public CircularRevealCoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_home, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentHomeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.berita;
      RecyclerView berita = rootView.findViewById(id);
      if (berita == null) {
        break missingId;
      }

      id = R.id.bottom_sheet;
      FrameLayout bottomSheet = rootView.findViewById(id);
      if (bottomSheet == null) {
        break missingId;
      }

      id = R.id.category;
      RecyclerView category = rootView.findViewById(id);
      if (category == null) {
        break missingId;
      }

      id = R.id.catmerchantnear;
      RecyclerView catmerchantnear = rootView.findViewById(id);
      if (catmerchantnear == null) {
        break missingId;
      }

      id = R.id.catmerchantpromo;
      RecyclerView catmerchantpromo = rootView.findViewById(id);
      if (catmerchantpromo == null) {
        break missingId;
      }

      id = R.id.cv_topmain;
      CardView cvTopmain = rootView.findViewById(id);
      if (cvTopmain == null) {
        break missingId;
      }

      id = R.id.detail;
      RelativeLayout detail = rootView.findViewById(id);
      if (detail == null) {
        break missingId;
      }

      CircularRevealCoordinatorLayout home = (CircularRevealCoordinatorLayout) rootView;

      id = R.id.icdetail;
      ImageView icdetail = rootView.findViewById(id);
      if (icdetail == null) {
        break missingId;
      }

      id = R.id.icpromo;
      ImageView icpromo = rootView.findViewById(id);
      if (icpromo == null) {
        break missingId;
      }

      id = R.id.ictopup;
      ImageView ictopup = rootView.findViewById(id);
      if (ictopup == null) {
        break missingId;
      }

      id = R.id.icwithdraw;
      ImageView icwithdraw = rootView.findViewById(id);
      if (icwithdraw == null) {
        break missingId;
      }

      id = R.id.indicator_unselected_background_review;
      CircleIndicator indicatorUnselectedBackgroundReview = rootView.findViewById(id);
      if (indicatorUnselectedBackgroundReview == null) {
        break missingId;
      }

      id = R.id.layout_swiperefresh;
      SwipeRefreshLayout layoutSwiperefresh = rootView.findViewById(id);
      if (layoutSwiperefresh == null) {
        break missingId;
      }

      id = R.id.ll_home;
      LinearLayout llHome = rootView.findViewById(id);
      if (llHome == null) {
        break missingId;
      }

      id = R.id.ll_office;
      LinearLayout llOffice = rootView.findViewById(id);
      if (llOffice == null) {
        break missingId;
      }

      id = R.id.lllayanan;
      LinearLayout lllayanan = rootView.findViewById(id);
      if (lllayanan == null) {
        break missingId;
      }

      id = R.id.llmerchantnear;
      LinearLayout llmerchantnear = rootView.findViewById(id);
      if (llmerchantnear == null) {
        break missingId;
      }

      id = R.id.llmerchantpromo;
      LinearLayout llmerchantpromo = rootView.findViewById(id);
      if (llmerchantpromo == null) {
        break missingId;
      }

      id = R.id.llnews;
      LinearLayout llnews = rootView.findViewById(id);
      if (llnews == null) {
        break missingId;
      }

      id = R.id.llrating;
      LinearLayout llrating = rootView.findViewById(id);
      if (llrating == null) {
        break missingId;
      }

      id = R.id.merchantnear;
      RecyclerView merchantnear = rootView.findViewById(id);
      if (merchantnear == null) {
        break missingId;
      }

      id = R.id.merchantpromo;
      RecyclerView merchantpromo = rootView.findViewById(id);
      if (merchantpromo == null) {
        break missingId;
      }

      id = R.id.nodatanear;
      TextViewSFProDisplayMedium nodatanear = rootView.findViewById(id);
      if (nodatanear == null) {
        break missingId;
      }

      id = R.id.nodatapromo;
      TextViewSFProDisplayMedium nodatapromo = rootView.findViewById(id);
      if (nodatapromo == null) {
        break missingId;
      }

      id = R.id.promo;
      RelativeLayout promo = rootView.findViewById(id);
      if (promo == null) {
        break missingId;
      }

      id = R.id.promoslider;
      LinearLayout promoslider = rootView.findViewById(id);
      if (promoslider == null) {
        break missingId;
      }

      id = R.id.rlslider;
      LinearLayout rlslider = rootView.findViewById(id);
      if (rlslider == null) {
        break missingId;
      }

      id = R.id.saldo;
      TextViewSFProDisplayMedium saldo = rootView.findViewById(id);
      if (saldo == null) {
        break missingId;
      }

      id = R.id.shimberita;
      ShimmerFrameLayout shimberita = rootView.findViewById(id);
      if (shimberita == null) {
        break missingId;
      }

      id = R.id.shimlistcatnear;
      LinearLayout shimlistcatnear = rootView.findViewById(id);
      if (shimlistcatnear == null) {
        break missingId;
      }

      id = R.id.shimlistcatpromo;
      LinearLayout shimlistcatpromo = rootView.findViewById(id);
      if (shimlistcatpromo == null) {
        break missingId;
      }

      id = R.id.shimlistnear;
      LinearLayout shimlistnear = rootView.findViewById(id);
      if (shimlistnear == null) {
        break missingId;
      }

      id = R.id.shimlistpromo;
      LinearLayout shimlistpromo = rootView.findViewById(id);
      if (shimlistpromo == null) {
        break missingId;
      }

      id = R.id.shimmepromo;
      ShimmerFrameLayout shimmepromo = rootView.findViewById(id);
      if (shimmepromo == null) {
        break missingId;
      }

      id = R.id.shimmercat;
      ShimmerFrameLayout shimmercat = rootView.findViewById(id);
      if (shimmercat == null) {
        break missingId;
      }

      id = R.id.shimmerchantnear;
      ShimmerFrameLayout shimmerchantnear = rootView.findViewById(id);
      if (shimmerchantnear == null) {
        break missingId;
      }

      id = R.id.shimmerchantpromo;
      ShimmerFrameLayout shimmerchantpromo = rootView.findViewById(id);
      if (shimmerchantpromo == null) {
        break missingId;
      }

      id = R.id.shimreview;
      ShimmerFrameLayout shimreview = rootView.findViewById(id);
      if (shimreview == null) {
        break missingId;
      }

      id = R.id.showall;
      TextViewSFProDisplayMedium showall = rootView.findViewById(id);
      if (showall == null) {
        break missingId;
      }

      id = R.id.topup;
      RelativeLayout topup = rootView.findViewById(id);
      if (topup == null) {
        break missingId;
      }

      id = R.id.tv_another_location;
      TextViewSFProDisplayMedium tvAnotherLocation = rootView.findViewById(id);
      if (tvAnotherLocation == null) {
        break missingId;
      }

      id = R.id.tv_from;
      TextViewSFProDisplayMedium tvFrom = rootView.findViewById(id);
      if (tvFrom == null) {
        break missingId;
      }

      id = R.id.tv_to;
      TextViewSFProDisplayMedium tvTo = rootView.findViewById(id);
      if (tvTo == null) {
        break missingId;
      }

      id = R.id.view_latest_news;
      LinearLayout viewLatestNews = rootView.findViewById(id);
      if (viewLatestNews == null) {
        break missingId;
      }

      id = R.id.viewPagerreview;
      ViewPager viewPagerreview = rootView.findViewById(id);
      if (viewPagerreview == null) {
        break missingId;
      }

      id = R.id.withdraw;
      RelativeLayout withdraw = rootView.findViewById(id);
      if (withdraw == null) {
        break missingId;
      }

      return new FragmentHomeBinding((CircularRevealCoordinatorLayout) rootView, berita,
          bottomSheet, category, catmerchantnear, catmerchantpromo, cvTopmain, detail, home,
          icdetail, icpromo, ictopup, icwithdraw, indicatorUnselectedBackgroundReview,
          layoutSwiperefresh, llHome, llOffice, lllayanan, llmerchantnear, llmerchantpromo, llnews,
          llrating, merchantnear, merchantpromo, nodatanear, nodatapromo, promo, promoslider,
          rlslider, saldo, shimberita, shimlistcatnear, shimlistcatpromo, shimlistnear,
          shimlistpromo, shimmepromo, shimmercat, shimmerchantnear, shimmerchantpromo, shimreview,
          showall, topup, tvAnotherLocation, tvFrom, tvTo, viewLatestNews, viewPagerreview,
          withdraw);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
