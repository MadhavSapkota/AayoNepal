// Generated by view binder compiler. Do not edit!
package com.ourdevelops.ourjek.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.ourdevelops.ourjek.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentLogisticLoaderBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final LinearLayout addLoader;

  @NonNull
  public final RelativeLayout confirm;

  @NonNull
  public final TextView loaderNumber;

  @NonNull
  public final RecyclerView loaderRecyclerView;

  @NonNull
  public final LinearLayout reduceLoader;

  private FragmentLogisticLoaderBinding(@NonNull RelativeLayout rootView,
      @NonNull LinearLayout addLoader, @NonNull RelativeLayout confirm,
      @NonNull TextView loaderNumber, @NonNull RecyclerView loaderRecyclerView,
      @NonNull LinearLayout reduceLoader) {
    this.rootView = rootView;
    this.addLoader = addLoader;
    this.confirm = confirm;
    this.loaderNumber = loaderNumber;
    this.loaderRecyclerView = loaderRecyclerView;
    this.reduceLoader = reduceLoader;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentLogisticLoaderBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentLogisticLoaderBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_logistic_loader, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentLogisticLoaderBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addLoader;
      LinearLayout addLoader = rootView.findViewById(id);
      if (addLoader == null) {
        break missingId;
      }

      id = R.id.confirm;
      RelativeLayout confirm = rootView.findViewById(id);
      if (confirm == null) {
        break missingId;
      }

      id = R.id.loaderNumber;
      TextView loaderNumber = rootView.findViewById(id);
      if (loaderNumber == null) {
        break missingId;
      }

      id = R.id.loaderRecyclerView;
      RecyclerView loaderRecyclerView = rootView.findViewById(id);
      if (loaderRecyclerView == null) {
        break missingId;
      }

      id = R.id.reduceLoader;
      LinearLayout reduceLoader = rootView.findViewById(id);
      if (reduceLoader == null) {
        break missingId;
      }

      return new FragmentLogisticLoaderBinding((RelativeLayout) rootView, addLoader, confirm,
          loaderNumber, loaderRecyclerView, reduceLoader);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
