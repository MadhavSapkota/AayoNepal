// Generated by view binder compiler. Do not edit!
package com.ourdevelops.ourjek.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.ourdevelops.ourjek.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutPickLocationBottomSheetBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final View divider;

  @NonNull
  public final ImageView imgBackSearch;

  @NonNull
  public final ImageView imgMap;

  @NonNull
  public final ImageView imgPickup;

  @NonNull
  public final ImageView imgSetOnMap;

  @NonNull
  public final LinearLayout layoutPickupLocation;

  @NonNull
  public final LinearLayout layoutSearchBack;

  @NonNull
  public final LinearLayout layoutSearchDestination;

  @NonNull
  public final LinearLayout layoutSearchSet;

  @NonNull
  public final RelativeLayout layoutSetOnMap;

  @NonNull
  public final TextView locationPickerAutoCompleteText;

  @NonNull
  public final RecyclerView recyclerViewSavedLocations;

  @NonNull
  public final TextView tvPickupLocation;

  private LayoutPickLocationBottomSheetBinding(@NonNull LinearLayout rootView,
      @NonNull View divider, @NonNull ImageView imgBackSearch, @NonNull ImageView imgMap,
      @NonNull ImageView imgPickup, @NonNull ImageView imgSetOnMap,
      @NonNull LinearLayout layoutPickupLocation, @NonNull LinearLayout layoutSearchBack,
      @NonNull LinearLayout layoutSearchDestination, @NonNull LinearLayout layoutSearchSet,
      @NonNull RelativeLayout layoutSetOnMap, @NonNull TextView locationPickerAutoCompleteText,
      @NonNull RecyclerView recyclerViewSavedLocations, @NonNull TextView tvPickupLocation) {
    this.rootView = rootView;
    this.divider = divider;
    this.imgBackSearch = imgBackSearch;
    this.imgMap = imgMap;
    this.imgPickup = imgPickup;
    this.imgSetOnMap = imgSetOnMap;
    this.layoutPickupLocation = layoutPickupLocation;
    this.layoutSearchBack = layoutSearchBack;
    this.layoutSearchDestination = layoutSearchDestination;
    this.layoutSearchSet = layoutSearchSet;
    this.layoutSetOnMap = layoutSetOnMap;
    this.locationPickerAutoCompleteText = locationPickerAutoCompleteText;
    this.recyclerViewSavedLocations = recyclerViewSavedLocations;
    this.tvPickupLocation = tvPickupLocation;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutPickLocationBottomSheetBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutPickLocationBottomSheetBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_pick_location_bottom_sheet, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutPickLocationBottomSheetBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.divider;
      View divider = rootView.findViewById(id);
      if (divider == null) {
        break missingId;
      }

      id = R.id.imgBackSearch;
      ImageView imgBackSearch = rootView.findViewById(id);
      if (imgBackSearch == null) {
        break missingId;
      }

      id = R.id.imgMap;
      ImageView imgMap = rootView.findViewById(id);
      if (imgMap == null) {
        break missingId;
      }

      id = R.id.imgPickup;
      ImageView imgPickup = rootView.findViewById(id);
      if (imgPickup == null) {
        break missingId;
      }

      id = R.id.imgSetOnMap;
      ImageView imgSetOnMap = rootView.findViewById(id);
      if (imgSetOnMap == null) {
        break missingId;
      }

      id = R.id.layoutPickupLocation;
      LinearLayout layoutPickupLocation = rootView.findViewById(id);
      if (layoutPickupLocation == null) {
        break missingId;
      }

      id = R.id.layoutSearchBack;
      LinearLayout layoutSearchBack = rootView.findViewById(id);
      if (layoutSearchBack == null) {
        break missingId;
      }

      id = R.id.layoutSearchDestination;
      LinearLayout layoutSearchDestination = rootView.findViewById(id);
      if (layoutSearchDestination == null) {
        break missingId;
      }

      LinearLayout layoutSearchSet = (LinearLayout) rootView;

      id = R.id.layoutSetOnMap;
      RelativeLayout layoutSetOnMap = rootView.findViewById(id);
      if (layoutSetOnMap == null) {
        break missingId;
      }

      id = R.id.locationPicker_autoCompleteText;
      TextView locationPickerAutoCompleteText = rootView.findViewById(id);
      if (locationPickerAutoCompleteText == null) {
        break missingId;
      }

      id = R.id.recyclerViewSavedLocations;
      RecyclerView recyclerViewSavedLocations = rootView.findViewById(id);
      if (recyclerViewSavedLocations == null) {
        break missingId;
      }

      id = R.id.tvPickupLocation;
      TextView tvPickupLocation = rootView.findViewById(id);
      if (tvPickupLocation == null) {
        break missingId;
      }

      return new LayoutPickLocationBottomSheetBinding((LinearLayout) rootView, divider,
          imgBackSearch, imgMap, imgPickup, imgSetOnMap, layoutPickupLocation, layoutSearchBack,
          layoutSearchDestination, layoutSearchSet, layoutSetOnMap, locationPickerAutoCompleteText,
          recyclerViewSavedLocations, tvPickupLocation);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
