// Generated by view binder compiler. Do not edit!
package com.ourdevelops.ourjek.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.ourdevelops.ourjek.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LogisticUserDetailViewBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView detailTitle;

  @NonNull
  public final EditText name;

  @NonNull
  public final TextView nameIncorrect;

  @NonNull
  public final LinearLayout nameLayout;

  @NonNull
  public final EditText number;

  @NonNull
  public final TextView numberIncorrect;

  @NonNull
  public final LinearLayout numberLayout;

  private LogisticUserDetailViewBinding(@NonNull RelativeLayout rootView,
      @NonNull TextView detailTitle, @NonNull EditText name, @NonNull TextView nameIncorrect,
      @NonNull LinearLayout nameLayout, @NonNull EditText number, @NonNull TextView numberIncorrect,
      @NonNull LinearLayout numberLayout) {
    this.rootView = rootView;
    this.detailTitle = detailTitle;
    this.name = name;
    this.nameIncorrect = nameIncorrect;
    this.nameLayout = nameLayout;
    this.number = number;
    this.numberIncorrect = numberIncorrect;
    this.numberLayout = numberLayout;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LogisticUserDetailViewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LogisticUserDetailViewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.logistic_user_detail_view, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LogisticUserDetailViewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.detailTitle;
      TextView detailTitle = rootView.findViewById(id);
      if (detailTitle == null) {
        break missingId;
      }

      id = R.id.name;
      EditText name = rootView.findViewById(id);
      if (name == null) {
        break missingId;
      }

      id = R.id.nameIncorrect;
      TextView nameIncorrect = rootView.findViewById(id);
      if (nameIncorrect == null) {
        break missingId;
      }

      id = R.id.nameLayout;
      LinearLayout nameLayout = rootView.findViewById(id);
      if (nameLayout == null) {
        break missingId;
      }

      id = R.id.number;
      EditText number = rootView.findViewById(id);
      if (number == null) {
        break missingId;
      }

      id = R.id.numberIncorrect;
      TextView numberIncorrect = rootView.findViewById(id);
      if (numberIncorrect == null) {
        break missingId;
      }

      id = R.id.numberLayout;
      LinearLayout numberLayout = rootView.findViewById(id);
      if (numberLayout == null) {
        break missingId;
      }

      return new LogisticUserDetailViewBinding((RelativeLayout) rootView, detailTitle, name,
          nameIncorrect, nameLayout, number, numberIncorrect, numberLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
